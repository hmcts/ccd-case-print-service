#!groovy
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ccd-case-print-service'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def product = "ccd"
def component = "case-print-service"

// Variables to switch pipeline logic and wiring per type of build
def dataStoreDevelopPr       = "PR-601" // This doesn't change frequently, but when it does, only change this value.
def definitionStoreDevelopPr = "PR-575" // This doesn't change frequently, but when it does, only change this value.
def printServiceApiDevelopPr = "PR-256" // This doesn't change frequently, but when it does, only change this value.
def prsToUseAat             = "" // Set this value to a PR number, or add it as a comma-separated value, if it's to follow CI/CD.

def secrets = [
    'ccd-${env}': [
        secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
        secret('ccd-importer-autotest-email', 'CCD_IMPORT_AUTOTEST_EMAIL'),
        secret('ccd-importer-autotest-password', 'CCD_IMPORT_AUTOTEST_PASSWORD'),
        secret('ccd-api-gateway-oauth2-client-secret', 'OAUTH2_CLIENT_SECRET'),
        secret('ccd-befta-caseworker-3-pwd', 'CCD_BEFTA_CASEWORKER_3_PWD'),
        secret('ccd-befta-master-caseworker-pwd', 'CCD_BEFTA_MASTER_CASEWORKER_PWD'),
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-ps', 'IDAM_SERVICE_KEY'),
        secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET')
    ]
]

def vaultOverrides = [
    'preview': 'aat',
    'spreview': 'saat'
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

// vars needed for functional tests
// Assume a feature build branched off 'develop', with dependencies develop-to-develop.
env.DEFINITION_STORE_HOST = "http://ccd-definition-store-api-${definitionStoreDevelopPr}.service.core-compute-preview.internal".toLowerCase()
env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-${dataStoreDevelopPr}.service.core-compute-preview.internal".toLowerCase()

// Other env variables needed for BEFTA.
env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.OAUTH2_CLIENT_ID = "ccd_gateway"
env.OAUTH2_REDIRECT_URI = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.DM_STORE_BASE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
env.CCD_CASEWORKER_AUTOTEST_EMAIL = "auto.test.cnp@gmail.com"
env.CCD_IMPORT_AUTOTEST_EMAIL = "ccd.docker.default@hmcts.net"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY = "JUST_WARN" // Temporary workaround for platform changes: turn BEFTA header checks to warning mode

withPipeline("nodejs", product, component) {
    onMaster {
        enableSlackNotifications('#ccd-master-builds')
    }
    if (env.BRANCH_NAME.equalsIgnoreCase(printServiceApiDevelopPr)) {
        enableSlackNotifications('#ccd-develop-builds')
    }
    onDemo {
        enableSlackNotifications('#ccd-demo-builds')
    }
    onPR {
        enableSlackNotifications('#ccd-pr-builds')
    }

    // Check if the build should be wired to an environment higher than 'preview'.
    if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'demo' || env.BRANCH_NAME == 'perftest' || env.BRANCH_NAME == 'ithc' || prsToUseAat.toLowerCase().contains(env.BRANCH_NAME.toLowerCase())) {
      environmentOfDependencies = env.BRANCH_NAME
      // use aat environment for dependencies of master and CI/CD builds.
      if (env.BRANCH_NAME.startsWith("PR") || env.BRANCH_NAME == 'master') {
        environmentOfDependencies = "aat"
      }
      env.DEFINITION_STORE_HOST       = "http://ccd-definition-store-api-${environmentOfDependencies}.service.core-compute-${environmentOfDependencies}.internal"
      env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-${environmentOfDependencies}.service.core-compute-${environmentOfDependencies}.internal"
    }
    echo "FTA will use Definition Store: ${env.DEFINITION_STORE_HOST}"
    echo "FTA will use Data Store: ${env.CCD_DATA_STORE_API_BASE_URL}"

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    enableAksStagingDeployment()
    disableLegacyDeployment()

    afterCheckout {
        sh "yarn cache clean"
    }

    after('build') {
        sh "yarn check"
    }

    after('smoketest:preview') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
    }

    after('smoketest:aat') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
    }

    after('functionalTest:preview') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
    }

    after('functionalTest:aat') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
    }
}
